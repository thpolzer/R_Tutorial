# Each element inside a data structure has a data type
# Example:
a <- 1.4
# a is not a sca
show(a[1])
mode(a)
df <- data.frame("a"<-NULL,"b"<-NULL)
df
df <- data.frame("a" = NULL,"b" = NULL)
df
df <- rbind(df,c(1,1))
df
str(function)
str(function())
class(function)
?function()
c
help("function")
f <- function(x,y) return (x/2)
f(2,3)
f <- function(x,y) return ((x-y)/2)
class(f)
str("function")
class("function")
class(function)
f
f
airquality
g <- function() return (function() (cat "Hello"))
g <- function() return (function() return (cat "Hello"))
g <- function(a,b,c) return (a(b,c))
g(f(5,6))
g(f,5,6)
h <- function(x,y) a+b
h(1,2)
h <- function(x,y) x + y
h(1,2)
q <- list()
j <- function(x,y) {
res <- list()
names("res") <- c("Sum",("Product"))
res[["Sum"]]<-x+y
res[["Product"]]<-x*y
return (res)
}
j(10,4)
j <- function(x,y) {
res <- list()
names("res") <- c("Sum","Product")
res[["Sum"]]<-x+y
res[["Product"]]<-x*y
return (res)
}
j(10,4)
j <- function(x,y) {
res <- list()
names(res) <- c("Sum","Product")
res[["Sum"]]<-x+y
res[["Product"]]<-x*y
return (res)
}
j(10,4)
j <- function(x,y) {
res <- list()
res[["Sum"]]<-x+y
res[["Product"]]<-x*y
return (res)
}
result <- j(10,4)
result
k <- function(k) k <- k*2
x <- 10
k(x)
k <- function(x) x <- x*2
k <- function(x) x <- x*2
k(10)
e <- k(10)
e
print(k(x))
print(x)
k1 <- function(x) x <<- x*2
print(k1(x))
print(x)
z <- function (a,b=100) return (a+b)
print(z(200))
print(z(200,1))
q <- function(function,a,b)
q <- function(c <- a+b,a,b) return (c)
f <- function(a,b) return(a^2)
f(3)
paste("a","b","c",sep=" ")
paste("a","b","c",sep="_")
args(paste)
f <- function(...,op){
args <- list(...)
if(op="+") return (sum(args))
else if (op = "*") return (prod(as.vector(args)))
else return ("You did not pass a valid operator")
}
f <- function(...,op){
args <- list(...)
if(op="+") {
return (sum(args))}
else if (op = "*") {
return (prod(as.vector(args)))}
else {
return ("You did not pass a valid operator")}
}
f <- function(...,op){
args <- list(...)
if(op=="+") {
return (sum(args))}
else if (op == "*") {
return (prod(as.vector(args)))}
else {
return ("You did not pass a valid operator")}
}
f <- function(...,op){
args <- list(...)
if(op=="+") return (sum(args))
else if (op == "*") return (prod(as.vector(args)))
else return ("You did not pass a valid operator")
}
f(1,2,3,op="+")
f <- function(...,op){
args <- list(...)
if(op=="+") return (sum(as.vector(args)))
else if (op == "*") return (prod(as.vector(args)))
else return ("You did not pass a valid operator")
}
f(1,2,3,op="+")
a <- list(1,2,3)
b <- as.vector(a)
b
b <- unlist(a)
b
f <- function(...,op){
args <- list(...)
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("You did not pass a valid operator")
}
f(1,2,3,op="+")
f(1,2,3,op="*")
f(1,2,13,op="*")
f(1,2,13,op="%")
f(1,2,13,14,op="+")
f(1,2,13,op="*")
f(1,2,op="%")
?is.numeric()
f <- function(...,op){
args <- list(...)
if (!is.numeric(any(unlist(args))))
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("You did not pass a valid operator")
}
f(1,2,13,14,op="+")
is.numeric(unlist(args()))
is.numeric(c(1,2,3))
is.numeric(c(1,2,"Thomas"))
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args)))
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("You did not pass a valid operator")
}
f(1,2,13,14,op="+")
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args))) return ("Error: All arguemnts infront of the operator need to be numeric")
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("You did not pass a valid operator")
}
f("Thomas",op="+")
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args))) return ("Error: All arguemnts infront of the operator need to be numeric")
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("You did not pass a valid operator")
}
f(1,2,13,14,op="+")
f(1,2,13,op="*")
f(1,2,op="%")
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args))) return ("Error: All arguemnts infront of the operator need to be numeric")
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("Error: You did not pass a valid operator. Only + or * are allowed")
}
f(1,2,13,14,op="+")
f(1,2,13,op="*")
f(1,2,op="%")
f(1,2,3,4,"Thomas",op="+")
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args))) return ("Error: All arguemnts in front of the operator need to be numeric")
if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("Error: You did not pass a valid operator. Only + or * are allowed")
}
f <- function(...,op){
args <- list(...)
if (!is.numeric(unlist(args))) return ("Error: All arguments in front of the operator need to be numeric")
else if(op=="+") return (sum(unlist(args)))
else if (op == "*") return (prod(unlist(args)))
else return ("Error: You did not pass a valid operator. Only + or * are allowed")
}
abs(c(-1,2))
f <- function(a,b){
if (any(c(a,b)) < 0){
g <- function(vec) return (abs(vec)*2)
return (g(c(a,b)))
}
return (c(a,b) * 10)
}
f(3,3)
any(c(1,-1)) < 0
any(c(1,-1)<0)
f <- function(a,b){
if (any(c(a,b) < 0)){
g <- function(vec) return (abs(vec)*2)
return (g(c(a,b)))
}
return (c(a,b) * 10)
}
f(1,2)
f(-1,2)
?unlist()
?class
a <- list(1,2,3)
a <- list(1,2,30)
for (i in a) print(i
for (i in a) print(i)
for (i in a) print(i)
load("householddata.rda")
getwd()
load("workspacedata/householddata.rda")
load("workspacedata/cardata.RData")
b <- cardata[,1]
b <- cardata2[,1]
for (j in a) print(j)
b <- cardata2[,1] # vector
for (j in b) print(j)
householddata
c <- as.matrix(householddata[,2],nrow = length(householddata[,2]))
c
for (k in c) print(k)
i <- 1
while (i < length(b)+1) print(b[i])
i <- 1
while (i < length(b)+1) print(b[i]); i <- i+1
length(b)+1
b[2]
i <- 1
while (i < length(b)+1) {
print(b[i])
i = i+1
}
Rprof()
i <- 1
while (i < length(b)+1) {
print(b[i])
i = i+1
}
lm(cardata1[,1] ~ cardata1[,2])
Rprof(NULL)
lm(cardata1[,1] ~ cardata1[,2])
a <- list(1,2,30) # list
for (i in a) i = sqrt(i); print(i)
for (i in a){
i = sqrt(i)
print(i)}
a
a1 <- 1
for (i in a){
a1 = a1+i
print(i)}
a1
lapply(a, function(x){
print(x)
})
lapply(a, function(x){
print(x)
})
lapply(a, function(x){
a1 = a1 +x
print(a1)
})
a <- list(1,2,30)
a1 <- 1
lapply(a, function(x){
a1 = a1 +x
print(a1)
})
a1
a
lapply(a, function(x){
x = a1 +x
print(a)
})
a <- list(1,2,30)
print(a)
lapply(a, function(x){
x = x*2
})
a
lapply(a, function(x){
if(x%%2 == 0)x=x+1 else x=-x
})
f <- function(x){
if(x%%2 == 0)x=x+1 else x=-x
}
res1 <- lapply(a,f)
res1
## INTRODUCTION
# A dataframe is a two-dimensional array-like structure in which each column
# contains values of one variable and each row contains one set of values from
# each column (similar to a table).
# Characteristics of a data frame:
# - column names should be non-empty.
# - row names should be unique.
# - The data stored in a data frame can be of numeric, factor or character type.
# - Each column should contain same number of data items.
# 1. Create a dataframe
# 1.1 Create an empty dataframe
#     This dataframe has neither a row nor a column (respective no column names yet)
df <- data.frame()
#     When filling the data frame, column- and rownames are assigned.
# 1.2 Create a dataframe manually
#     just as for the empty dataframe, the function data.frame is used.
#     After the column names and a = sign, a vector for each column is attached
#     and by comma separated (ATTENTION: all vectors need to be of the same size)
#     "stringsAsFactors" decides whether Strings will be used as character type
#     or as factor type (by default it is set to TRUE)
df1 <- data.frame(
emp_id = c (1:5),
emp_name = c("Thomas","Axel","Frank","Gosia","Annika"),
salary = c(450.6,515.2,611.0,729.0,380.2),
stringsAsFactors = FALSE
)
#     Alternatively, the function data.frame can take a matrix or variables
#     If the df is created from variables, variable names will be taken as
#     column names, for a matrix there are preselected columnnames
a <- c(10,20,30,40)
b <- c('book', 'pen', 'textbook', 'pencil_case')
c <- c(TRUE,FALSE,TRUE,FALSE)
d <- c(2.5, 8, 10, 7)
df2 <- data.frame(a,b,c,d)
Mat1 <- matrix(c(1, 5, 14, 23, 54, 9, 15, 85, 3, 42, 9, 7, 42, 87, 16), ncol=3)
df3 <- as.data.frame(t(Mat1))
# 1.3 Create a dataframe from stored data
#     to load data from csv, take a look at 00_DataLoad_dataSave.R
#     csv are automatically stored in dataframes:
#     with "header" you can define whether the csv contains columnnames or not
df4 <- read.csv("testdata/01_car1.csv",header=TRUE)
#     loading from an existing workspace is possible as well
df5 <- dget("workspacedata/cardata1.R")
# 2. Assigning column- and rownames
# 2.1 columnnames
namesdf2 <- names(df2)
#     setting the columnnames is using the names() function and assigning a vector
#     vector must have exactly the length the dataframe has columns
names(df2) <-c('ID', 'items', 'store', 'price')
namesdf2 <- names(df2)
# 2.2 rownames
#     vector to assign new rownames needs to have exactly number of rows as elements
rownames <- row.names(df2)
row.names(df2) <- c('This','is','a','test')
rownames <- row.names(df2)
# 3. Gather information about existing dataframe
#    print the dataframe to the console
df2
#    print the dataframe structure
str(df2)
#    print the summary of the dataframe
summary(df2)
# 4. Select specific entries of a dataframe
#    Selecting specific rows/columns/items of a dataframe is called slicing
#    A data frame is composed of rows and columns, df[rows, columns]
#    Slicing can be specified by rows, columns or both:
#    selecting a specific row, but all columns: (result is a df as well)
row <- df2[2,]
#    selecting a specific column, but all rows: (result is a vector)
column <- df2[,3]
#    selecting a specific item:
item <- df2[2,3]
#    selecting a column by its name: (result is a vector)
column_by_name <- df4[,'age']
column_by_name2 <- df4$age
#    selecting multiple rows and columns at the same time
#    the following example will show the columns age and brand for the first 5 rows
my_selection <- df4[1:5,c('age','brand')]
#    subsetting with a condition is done with subset function: subset(df, condition)
my_subset <- subset(df4, subset = age >= 50)
# 5. Insert data into an existing dataframe
# 5.1 append a column
#     Appending a column is done creating a new vector (same length as df has rows)
#     After this the new column is appended using $ sign
location <- c('Germany', 'France', 'Spain', 'Italy')
df2$location <- location
#     Alternatively, a column can be added with the cbind() function
#     Therefore another df is created and then appended
regions <- data.frame(
region = c("Hessen","Bretagne","Costa Brava","Tuscany"),
stringsAsFactors = FALSE
)
df2 <- cbind(df2,regions)
# 5.2 inserting a row
#     To add more rows permanently to an existing data frame, we need to bring
#     in the new rows in the same structure as the existing data frame and use
#     the rbind() function. First: create the two data frames: We will take df1
#     and a new one (important: same structure!):
df1_append <- data.frame(
emp_id = c (6:8),
emp_name = c("Ralph","Steffi","Wulf"),
salary = c(627.9,832.1,880.2),
stringsAsFactors = FALSE
)
#     Bind the two data frames.
df1_finaldata <- rbind(df1,df1_append)
# 6. Remove data
# 6.1 remove a column
#     for removing a column, either you select all columns expect the one you
#     want to delete, or by assigning NULL:
df2$location <- NULL
# 6.2 remove a row
#     for removing a row, either you select all rows except the one you want to delete,
#     or you build a subset (like explained in 4), or you kind of deselect all
#     rows you want to delete:
df2_with_deleted_row <- df2[-c(3),]
# 7. Update/overwrite data
#    updating or overwriting data is done with selection
#    updating a single item means selecting this item and assigning a new value
df4[1,'age'] <- 18
#    The same applies for updating a whole row, column or just multiple entries
#    make sure the length of the input is exactly the length expected
listOfsplittedDataframe <- split(df5,df5$brand)
str(listOfsplittedDataframe[["Audi"]])
split(df1,df1$emp_name)
?split()
listOfsplittedDataframe <- split(df5,df5$salary)
listOfsplittedDataframe
?gl()
rm(list=ls())
load("workspacedata/householddata.rda")
load("workspacedata/cardata.RData")
partitionedCardata <- split(cardata1,cardata1$brand)
partitionedCardata
averageSalaryPerBrand <- lapply(partitionedCardata,function(x){
sum(x$brand)
})
averageSalaryPerBrand <- lapply(partitionedCardata,function(x){
sum(x$salary)
})
?average()
maxSalaryPerBrand <- lapply(partitionedCardata,function(x){
max(x$salary)
})
l1 <- list(a=c(4,1,19),b=list(b1=list(c(9,8,3),b2=c(1,2,3))))
l1
l <- list(a=c(4,1,19),b=list(b1=list(c(9,8,3),b2=c(1,2,3))))
res_lapply <- lapply(l,function(x){
if (x %% 2 == 0)x=0 else x=1
})
5%2
5%%2
l <- list(a=c(4,1,19),b=list(b1=list(c(9,8,3),b2=c(1,2,3))))
lapply(l,function(x){
if (x%%2 == 0)x=0 else x=1
})
l <- list(c(4,1,19),list(list(c(9,8,3),c(1,2,3))))
l
res_lapply <- lapply(l,function(x){
if (x%%2 == 0)x=0 else x=1
})
l <- list(a=c(4,1,19),b=list(b1=list(c(9,8,3),b2=c(1,2,3))))
res_lapply <- lapply(l,function(x){
if (x%%2 == 0)x=0 else x=1
})
lapply(l,mean)
lapply(unlist(l),mean)
res_lapply <- lapply(unlist(l),function(x){
if (x%%2 == 0)x=0 else x=1
})
res_lapply
res_sapply <- sapply(unlist(l),function(x){
if (x%%2 == 0)x=0 else x=1
})
res_sapply
maxSalaryPerBrand1 <- lapply(partitionedCardata,function(x){
max(x$salary)
})
maxSalaryPerBrand1 <- lapply(partitionedCardata,function(x){
max(x$salary)
})
maxSalaryPerBrand2 <- sapply(partitionedCardata,function(x){
max(x$salary)
})
maxSalaryPerBrand2
maxSalaryPerBrand2$Audi
maxSalaryPerBrand2$Audi["Audi"]
maxSalaryPerBrand2$Audi[1]
maxSalaryPerBrand2["Audi"]
rm(list=ls())
rnorm(20)
rnorm(20,20)
rnorm(20,20,1000)
