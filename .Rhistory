install.packages("odbc")
install.packages("dplyr")
library(odbc)
con <- DBI::dbConnect(odbc:odbc(),Driver="MySQLDB",Server="localhost",UID="testuser",PWD="testuser",Port=3306)
con <- DBI::dbConnect(drv ="MySQLDB",server="localhost",uid="testuser",daabase="test,pwd="testuser",Port=3306)
dbListTables(con)
library(odbc)
con <- DBI::dbConnect(drv ="MySQLDB",server="localhost",uid="testuser",daabase="test",pwd="testuser",Port=3306)
con <- DBI::dbConnect(drv ="MySQLDB",server="localhost",uid="testuser",database="test",pwd="testuser",Port=3306)
library(odbc)
con <- dbConnect(drv ="MySQLDB",server="localhost",uid="testuser",database="test",pwd="testuser",Port=3306)
library(odbc)
con <- dbConnect(drv ="MySQLDB",server="localhost",uid="testuser",database="test",pwd="testuser")
library(odbc)
con <- dbConnect("drv=MySQLDB,server=localhost,uid=testuser,database=test,pwd=testuser")
install.packages("RODBC")
library(RODBC)
con <- odbcConnect("drv=MySQLDB,server=localhost,uid=testuser,database=test,pwd=testuser")
con <- odbcConnect("MySQLDB")
library(RODBC)
con <- odbcConnect("MySQL64",uid="testuser",pwd="testuser")
library(RODBC)
con <- odbcConnect("MySQL64",uid="testuser",pwd="testuser")
query <- "select * from employee"
res <- sqlQuery(con,query)
close(con)
View(res)
lines(x,y)
x <- c(1,2,3)
y <- c(4,6,12)
lines(x,y)
plot(x,y,type="l")
?par()
a <- c(1,2,3)
b <- c(7,9,12)
lines(a,b)
### INTRODUCTION ###
## Graphics is quite a complex topic in R, this section covers fundamental plotting only. More advanced features within this area
## will be covered in an extra course which will be part of the Advanced R Tutorial.
## 1. The plot() and abline() function
# plot() is a generic function, i.e. a placeholder for a family of functions. The function that actually gets called
# will depend on the class of the object on which it is called: The same concept exists in Java (Generics) and Scala as well.
# 1.1 The simplest plot
# The below plot actually does not make any sense. A 2-dimensional-plot reequires x- and y-values, we only have one vector here,
# representing the x-values. As a result, automatically takes the same vector as y-values.
x <- c(1,2,3)
plot(x)
y <- c(4,6,12)
plot(x,y)
# 1.2 abline()
lmout <- lm(y~x)
# The linear regression function lm() is a class instance containing the slope and intercept of the fitted line, as well as
# various other quantities. We’ve assigned that class instance to lmout. The slope and intercept will now be in lmout$coefficients.
# What happens when we call abline()? This is simply a function that draws a straight line, with the
# function’s arguments being treated as the intercept and slope of the line. For instance, the call abline(c(2,1))
# would draw the line y = 1 * x + 2 on whatever graph we’ve built up so far.
# But actually, even abline() is a generic function, and since we are invoking it on the output of lm(), this
# version of the function knows that the slope and intercept it needs will be in lmout$coefficients, and it plots
# that line. Note again that it superimposes this line onto the current graph—the one which currently graphs the three points.
abline(lmout)
plot(x,y,type="l")
plot(c(2,3,4),c(5,6,7),y,type="l")
### INTRODUCTION ###
## Graphics is quite a complex topic in R, this section covers fundamental plotting only. More advanced features within this area
## will be covered in an extra course which will be part of the Advanced R Tutorial.
## 1. The plot() and abline() function
# plot() is a generic function, i.e. a placeholder for a family of functions. The function that actually gets called
# will depend on the class of the object on which it is called: The same concept exists in Java (Generics) and Scala as well.
# 1.1 The simplest plot
# The below plot actually does not make any sense. A 2-dimensional-plot reequires x- and y-values, we only have one vector here,
# representing the x-values. As a result, automatically takes the same vector as y-values.
x <- c(1,2,3)
plot(x)
y <- c(4,6,12)
plot(x,y)
# 1.2 abline()
lmout <- lm(y~x)
# The linear regression function lm() is a class instance containing the slope and intercept of the fitted line, as well as
# various other quantities. We’ve assigned that class instance to lmout. The slope and intercept will now be in lmout$coefficients.
# What happens when we call abline()? This is simply a function that draws a straight line, with the
# function’s arguments being treated as the intercept and slope of the line. For instance, the call abline(c(2,1))
# would draw the line y = 1 * x + 2 on whatever graph we’ve built up so far.
# But actually, even abline() is a generic function, and since we are invoking it on the output of lm(), this
# version of the function knows that the slope and intercept it needs will be in lmout$coefficients, and it plots
# that line. Note again that it superimposes this line onto the current graph—the one which currently graphs the three points.
abline(lmout)
plot(c(2,3,4),c(5,6,7),type="l")
### INTRODUCTION ###
## Graphics is quite a complex topic in R, this section covers fundamental plotting only. More advanced features within this area
## will be covered in an extra course which will be part of the Advanced R Tutorial.
## 1. The plot() and abline() function
# plot() is a generic function, i.e. a placeholder for a family of functions. The function that actually gets called
# will depend on the class of the object on which it is called: The same concept exists in Java (Generics) and Scala as well.
# 1.1 The simplest plot
# The below plot actually does not make any sense. A 2-dimensional-plot reequires x- and y-values, we only have one vector here,
# representing the x-values. As a result, automatically takes the same vector as y-values.
x <- c(1,2,3)
plot(x)
y <- c(4,6,12)
plot(x,y)
# 1.2 abline()
lmout <- lm(y~x)
# The linear regr
abline(lmout)
plot(c(2,3,4),c(5,6,7),type="l")
lines(c(1,2),c(5,7))
?plot()
load("workspacedata/cardata_binaryFormat.rda")
getwd()
setwd("C:/Users/Thomas/R_Projekte/R_Tutorial/")
load("workspacedata/cardata_binaryFormat.rda")
View(cardata2)
plot(cardata2$age,cardata2$salary,color="blue")
plot(cardata2$age,cardata2$salary,col="blue")
warnings()
plot(cardata2$age,cardata2$salary,col="blue")
abline(lm(cardata2$salary,cardata2$age),col="orange")
abline(lm(cardata2$salary ~ cardata2$age),col="orange")
plot(cardata2$age,cardata2$salary,col="blue",type="l")
View(cardata2)
cardata <- cardata2[order(age),]
cardata <- cardata2[order(age),]
cardata <- cardata2[order(cardata2$age),]
cardata
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
abline(lm(cardata$salary ~ cardata$age),col="orange")
abline(lm(cardata$age ~ cardata$salary),col="orange")
load("workspacedata/cardata_binaryFormat.rda")
# 1.4 point() function
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$age ~ cardata$salary),col="orange")
abline(lm(cardata$age ~ cardata$salary),col="orange")
abline(lm(cardata$salary ~ cardata$age),col="orange")
load("workspacedata/cardata_binaryFormat.rda")
sortedByAge <- cardata2[order[cardata2$age],]
sortedByAge <- cardata2[order(cardata2$age),]
View(sortedByAge)
sortedbyAgeAndPrice <- cardata2[order(cardata2$age,cardata2$price),]
View(sortedbyAgeAndPrice)
View(cardata)
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
points(age1,age2,col="green")
points(age1,salary1,col="green")
points(age1,salary1,col="green",type="l")
cardata <- cardata2[order(cardata2$age,cardata$salary),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
points(age1,salary1,col="green",type="l")
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
points(age1,salary1,col="green",type="l")
cardata_additional <- data.frame("age"<-age1,"salary"="salary1")
View(cardata1)
View(cardata_additional)
cardata_additional <- data.frame("age"<-age1,"salary" <- salary1)
cardata_additional <- data.frame(age <-age1,salary <- salary1)
View(cardata_additional)
df1 <- data.frame(
emp_id = c (1:5),
emp_name = c("Thomas","Axel","Frank","Gosia","Annika"),
salary = c(450.6,515.2,611.0,729.0,380.2),
stringsAsFactors = FALSE
)
View(df1)
cardata_additional <- data.frame(age = age1,salary = salary1)
View(cardata_additional)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
points(cardata_additional,col="green",type="l")
View(cardata_additional)
# 1.4 point() function
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
points(cardata_additional,col="green",type="l")
points(cardata_additional,col="green",pch="§")
# 1.4 point() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
legend(2000,31162,legend="CS",lty=1)
legend(100,200,legend="CS",lty=1)
text(20,20,"Gude")
points(cardata_additional,col="green",pch="p")
text(200,200,"Gude")
text(200,200,"Gude")
.4 point() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="p")
# 1.4 point() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
text(200,200,"Gude")
text(40,75000,"Gude")
# 3. points() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
legend(47,70000,legend="First Table",lty=1)
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(40,70000,legend="First Table",lty=1)
# would place a legend at the point (47,7000
# 3. points() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# 4. legend()
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(42,70000,legend="First Table",lty=1)
# would place a legend at the point (47,7000
?legend()
# 4. legend()
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(42,70000,legend="First Table",lty=1,col="blue")
?legend
legend(46,90000,legend="Second Table",col="green")
legend(44,93000,legend="Second Table",lty=2,col="green")
# would place a legend at the point (47,70000) in the gra
# 3. points() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
legend(42,70000,legend="First Table",lty=1,col="blue")
legend(44,93000,legend="Second Table",lty=2,col="green")
?plot
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# add title for the axes
plot(xlab="age",ylab="salary")
# 3. points() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l",xlab="age",ylab="salary")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# add title for the axes
plot()
legend(42,70000,legend="First Table",lty=1,col="blue")
legend(44,93000,legend="Second Table",lty=2,col="green")
# would place a legend at the point (47,70000) in the gra
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l",xlab="age",ylab="salary",bg="yellow")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additio
points(cardata_additional,col="green",pch="+")
?plot
?point)=
?points()
# 3. points() function
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l",xlab="age",ylab="salary")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# 4. legend()
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(42,70000,legend="First Table",lty=1,col="blue")
legend(44,93000,legend="Second Table",lty=2,col="green")
# would place a legend at the point (47,70000) in the graph, with a little line of type 1 and label of ”First Table”.
text(15,92000,"Example")
text(35,82000,"Example")
text(35,90000,"Example")
text(30,90000,"Example")
text(22,90000,"Example")
View(cardata)
text(25,90000,"Example")
text(26,90000,"Example")
# The points() function adds a set of (x,y)-points, with labels for each, to the currently displayed graph.
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l",xlab="age",ylab="salary")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# 4. legend()
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(42,70000,legend="First Table",lty=1,col="blue")
legend(44,93000,legend="Second Table",lty=2,col="green")
# would place a legend at the point (47,70000) in the graph, with a little line of type 1 and label of ”First Table”.
text(26,90000,"Plot Example")
cardata <- cardata2[order(cardata2$age),]
plot(cardata$age,cardata$salary,col="blue",type="l",xlab="age",ylab="salary")
abline(lm(cardata$salary ~ cardata$age),col="orange")
age1 <- ifelse(cardata$age > 40,cardata$age-2,cardata$age+2)
salary1 <- ifelse(cardata$salary > 52000,cardata$salary - 5000,cardata$salary + 5600)
cardata_additional <- data.frame(age = age1,salary = salary1)
cardata_additional <- cardata_additional[order(cardata_additional$age),]
# For instance, the command superimpose onto the current graph the points of the new dataframe,
# using ”+” signs to mark them.
points(cardata_additional,col="green",pch="+")
# 4. legend()
# is used to add a legend to a multicurve graph. Define x- and y value of the graph where it should be located
legend(42,70000,legend="First Table",lty=1,col="blue")
legend(44,93000,legend="Second Table",lty=2,col="green")
# would place a legend at the point (47,70000) in the graph, with a little line of type 1 and label of ”First Table”.
# text() function to place some text anywhere in the current graph. For example,
text(28,90000,"Plot Example",col="brown")
# would write the text ”Plot Example” at t
# 6. curve()
curve(cardata$age,cardata$salary,col="blue")
f <- function(x) return (f^2)
curve(f,-3,3)
?curve()
load("workspacedata/cardata_binaryFormat.rda")
### INTRODUCTION ###
f <- function(x) return (f^2)
curve(f,0,3)
# you need to define the allowed values for x and y
f <- function(x) return (x^2)
curve(f,0,3)
curve(f,-3,3)
f <- function(x) return (x^2)
curve(f,-3,3,xlab="x-Werte")
f <- function(x) return (x^2)
curve(f,-3,3,xlab="x-Werte",bg="green")
curve(f,-3,3,xlab="x-Werte",col="red")
curve(f,-3,3,xlab="x-Werte",col="red")
text(-1,8,"Normalparabel")
text(-0.5,8,"Normalparabel")
text(-0.2,8,"Normalparabel")
?lines()
f <- function(x) return (x^2)
curve(f,-3,3,xlab="x-Werte",col="red",lwd=3)
text(-0.2,8,"Normalparabel")
f <- function(x) return (x^2)
curve(f,-3,3,xlab="x-Werte",col="red",lwd=3,font=4)
text(-0.2,8,"Normalparabel")
